<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_126749_aws_sc.AutomationExecutionRepo</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>AutomationExecutionRepo</name>
        <script><![CDATA[var AutomationExecutionRepo = /** @class */ (function () {
    function AutomationExecutionRepo() {
    }
    /**
     * Create an initial record of an automation execution, with minimal details.
     * @param automationExecutionId {AWS.SystemsManager.AutomationExecutionId} The automationExecutionId response returned from the AWS request to start the execution
     * @param awsregion {string} Region that contains the backing automation document
     * @param name {string} Name of the backing automation document
     * @param awsversionname {string} Version name of the backing automation document
     * @param ownedBy {string} Sys ID of the user that owns the product
     *
     * @return {GlideRecord} The GlideRecord object for the saved data
     */
    AutomationExecutionRepo.createAutomationExecutionFromId = function (automationExecutionId, awsaccount, awsregion, name, awsversionname, ownedBy) {
        var automationExecution = new GlideRecord('x_126749_aws_sc_cmdb_ci_ae');
        automationExecution.initialize();
        Util.setValue(automationExecution, 'awsautomationexecutionid', automationExecutionId);
        Util.setValue(automationExecution, 'awsaccount', awsaccount.sys_id.toString());
        Util.setValue(automationExecution, 'name', automationExecutionId);
        Util.setValue(automationExecution, 'awsregion', awsregion);
        Util.setValue(automationExecution, 'awsdocumentname', name);
        Util.setValue(automationExecution, 'awsdocumentversion', awsversionname);
        Util.setValue(automationExecution, 'owned_by', ownedBy);
        Util.setValue(automationExecution, 'awsautomationexecutionstatus', "Pending" /* Pending */);
        automationExecution.insert();
        return automationExecution;
    };
    /**
     * Sets status and issues a database update
     *
     * @param automationExecution {GlideRecord} Record to update
     * @param syncStatus {number} Status to give the record
     * @param [message] {string} Optional error status message
     */
    AutomationExecutionRepo.updateWithStatus = function (automationExecution, syncStatus, message) {
        Util.setValue(automationExecution, 'awssyncstatus', syncStatus);
        Util.setValue(automationExecution, 'awsstatusmessage', message);
        automationExecution.update();
        return automationExecution;
    };
    return AutomationExecutionRepo;
}());
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-10 15:34:36</sys_created_on>
        <sys_id>925650c82ff4d01047d8b6a62799b6e8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AutomationExecutionRepo</sys_name>
        <sys_package display_value="AWS Service Management Connector - 4.7.7" source="x_126749_aws_sc">f0b117a3db32320093a7d7a0cf961912</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AWS Service Management Connector - 4.7.7">f0b117a3db32320093a7d7a0cf961912</sys_scope>
        <sys_update_name>sys_script_include_925650c82ff4d01047d8b6a62799b6e8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-15 10:10:29</sys_updated_on>
    </sys_script_include>
</record_update>
