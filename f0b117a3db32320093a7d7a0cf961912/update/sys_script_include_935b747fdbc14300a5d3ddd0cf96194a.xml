<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_126749_aws_sc.Synchronizer</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Synchronizer</name>
        <script><![CDATA[var Synchronizer = /** @class */ (function () {
    /**
     * @param providers Optional set of SyncProviders.
     */
    function Synchronizer(providers) {
        this.providers = providers ? providers : Synchronizer.defaultProviders();
        this.syncContext = {};
    }
    Synchronizer.defaultProviders = function () {
        return [
            new ServiceCatalogSyncProvider(),
            new SystemsManagerSyncProvider(),
            new SecurityHubSyncProvider(),
            new ConfigSyncProvider(),
            new OpsCenterSyncProvider(),
            new SupportServicesSyncProvider(),
            new SupportSqsSyncProvider(),
            new HealthSyncProvider(),
            new IncidentManagerSyncProvider(),
			new NonConfigSyncProvider(),
        ];
    };
    /** Check that the instance is configured suitably to synchronise AWS Service Management data. */
    Synchronizer.prototype.validateInstance = function () {
        var skipPrefix = "[SYNC] Skipping AWS Service Management data synchronization";
        try {
            new sn_sc.CatalogItemVariableSetM2M();
        }
        catch (e) {
            gs.error("".concat(skipPrefix, " - cannot create \"sn_sc.CatalogItemVariableSetM2M\". Error: ").concat(e.message));
            return false;
        }
        return true;
    };
    /**
     * Call each provider 'fromAws' method and log results
     */
    Synchronizer.prototype.run = function (syncDirection) {
        var _this = this;
        if (!this.validateInstance()) {
            return false;
        }
        this._checkAccountNumberPopulated();
        if (!syncDirection) {
            syncDirection = Synchronizer.SyncDirection.SYNC_FROM_AWS;
        }
        var direction = syncDirection === Synchronizer.SyncDirection.SYNC_FROM_SN ? "from ServiceNow" : "from AWS";
        var overallResults = {
            success: true,
            seconds: 0,
            requests: 0
        };
        gs.info("[SYNC] Starting synchronization ".concat(direction, " of:\n").concat(this.providers.filter(function (p) { return p.validate(); }).map(function (p) { return "- ".concat(p.providerName); }).join('\n')));
        this.providers.forEach(function (provider) {
            if (provider.validate()) {
                var syncResults = syncDirection === Synchronizer.SyncDirection.SYNC_FROM_SN
                    ? provider.fromSn(_this.syncContext)
                    : provider.fromAws(_this.syncContext);
                overallResults.success = overallResults.success && syncResults.success;
                overallResults.seconds += syncResults.seconds;
                overallResults.requests += syncResults.requests;
            }
            else {
                overallResults.success = false;
                gs.warn("[SYNC] Provider for \"".concat(provider.providerName, "\" seems to be misconfigured. Please check the debug and error logs for more information."));
            }
        });
        var result = 'Completed synchronization of all AWS Service Management data.';
        if (!overallResults.success) {
            result += '\nHowever, some AWS accounts encountered problems during the synchronization, as noted in other log messages (please check the debug, warning and error logs for more information). These will be re-attempted on the next round.';
        }
        gs.info([
            "[SYNC] ".concat(result),
            "** Success: ".concat(overallResults.success),
            "** Time: ".concat(overallResults.seconds.toFixed(1), "s"),
            "** Requests: ".concat(overallResults.requests)
        ].join('\n'));
    };
    /**
     * Checks if the new awsaccountnumber field of  x_126749_aws_sc_account
     * and updates it if it is empty
     * @return void
     */
    Synchronizer.prototype._checkAccountNumberPopulated = function () {
        var account = new GlideRecord('x_126749_aws_sc_account');
        account.query();
        while (account.next()) {
            try {
				var region;
                if(Util.isGovCloudAccount(account.sys_id.toString())){
					region = "us-gov-west-1";
				} else if(Util.isBeijingRegionAccount(account.sys_id.toString())){
					region = "cn-north-1";
				} else if(Util.isNingxiaRegionAccount(account.sys_id.toString())) {
					region = "cn-northwest-1";
				} else {
					region = "us-east-1";
				}
                var stsService = new AwsSecurityTokenService(region, AwsCredentials.from(account).as(AwsCredentials.User.Sync));
                var callerIdentityResponse = stsService.getCallerIdentity();
                account.awsaccountnumber = callerIdentityResponse.Account;
                account.update();
            }
            catch (ex) {
                gs.info("[SYNC] Skipping account number synchronization: could not retrieve caller identity for account \"".concat(account.awsname.toString(), "\": ").concat(ex.message, "\"."));
                continue;
            }
        }
    };
    return Synchronizer;
}());
(function (Synchronizer) {
    var SyncDirection;
    (function (SyncDirection) {
        SyncDirection[SyncDirection["SYNC_FROM_AWS"] = 0] = "SYNC_FROM_AWS";
        SyncDirection[SyncDirection["SYNC_FROM_SN"] = 1] = "SYNC_FROM_SN";
    })(SyncDirection = Synchronizer.SyncDirection || (Synchronizer.SyncDirection = {}));
})(Synchronizer || (Synchronizer = {}));
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-09-13 15:13:27</sys_created_on>
        <sys_id>935b747fdbc14300a5d3ddd0cf96194a</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Synchronizer</sys_name>
        <sys_package display_value="AWS Service Management Connector - 4.7.7" source="x_126749_aws_sc">f0b117a3db32320093a7d7a0cf961912</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AWS Service Management Connector - 4.7.7">f0b117a3db32320093a7d7a0cf961912</sys_scope>
        <sys_update_name>sys_script_include_935b747fdbc14300a5d3ddd0cf96194a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-03-06 06:05:14</sys_updated_on>
    </sys_script_include>
</record_update>
