<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_126749_aws_sc.SupportCaseRepo</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>SupportCaseRepo</name>
        <script><![CDATA[var SupportCaseRepo = /** @class */ (function () {
    function SupportCaseRepo() {
    }
    /**
     * Search for the Incident that related to the Support Case
     * that the returned OpsItem is valid by calling its `.isValidRecord()`
     * method.
     *
     * @param caseIdentifier Technical ID to perform API calls
     * @param displayId ID displayed on AWS Console
     * @param status Support Case Status on AWS
     * @param message Successful message to add as a ServiceNow Work notes
     * @param sysId Incident Sys ID
     */
    SupportCaseRepo.prototype.updateIncidentOnSupportCaseCreation = function (caseIdentifier, displayId, status, message, sysId) {
        var isIntermediateTableModeEnabled = this.isIntermediateTableModeEnabled();
        //Get Incident linked to Support Case
        var supportCaseGr = new GlideRecord(isIntermediateTableModeEnabled ?
            'x_126749_aws_sc_smc_support_case' :
            'incident');
        supportCaseGr.addQuery('sys_id', sysId);
        supportCaseGr.query();
        if (supportCaseGr.next()) {
            //Update Incident without triggering automatic mechanisms
            supportCaseGr.setWorkflow(false);
            Util.setValue(supportCaseGr, "x_126749_aws_sc_awscaseidentifier", caseIdentifier);
            Util.setValue(supportCaseGr, "x_126749_aws_sc_awssupportcaseid", displayId);
            Util.setValue(supportCaseGr, "x_126749_aws_sc_awscasestatus", status);
            if (!isIntermediateTableModeEnabled) {
                Util.setValue(supportCaseGr, "work_notes", message);
            }
            supportCaseGr.update();
        }
    };
    /**
     * Search for the Incident that related to the Support Case
     * and a Worknote to it
     *
     * @param message Successful message to add as a ServiceNow Work notes
     * @param status Final State of the Support Case
     * @param sysId Incident Sys ID
     */
    SupportCaseRepo.prototype.updateIncidentOnSupportCaseResolution = function (message, status, sysId) {
        var isIntermediateTableModeEnabled = this.isIntermediateTableModeEnabled();
        if (!isIntermediateTableModeEnabled) {
            //Get Incident linked to Support Case
            var supportCaseGr = new GlideRecord('incident');
            supportCaseGr.addQuery('sys_id', sysId);
            supportCaseGr.query();
            if (supportCaseGr.next()) {
                //Update Incident without triggering automatic mechanisms
                supportCaseGr.setWorkflow(false);
                Util.setValue(supportCaseGr, "work_notes", message);
                Util.setValue(supportCaseGr, "x_126749_aws_sc_awscasestatus", status);
                supportCaseGr.update();
            }
        }
        else {
            var smcSupportCaseGr = new GlideRecord('x_126749_aws_sc_smc_support_case');
            smcSupportCaseGr.get(sysId);
            smcSupportCaseGr.query();
            if (smcSupportCaseGr.next()) {
                smcSupportCaseGr.setWorkflow(false);
                Util.setValue(smcSupportCaseGr, "x_126749_aws_sc_awscasestatus", status);
                smcSupportCaseGr.update();
            }
        }
    };
    /**
     * Search for the Incident that related to the Support Case
     * and a Work note to it
     *
     * @param message Message to add as a ServiceNow Work notes
     * @param sysId Incident Sys ID
     */
    SupportCaseRepo.prototype.addWorkNoteToIncident = function (message, sysId) {
        var isIntermediateTableModeEnabled = this.isIntermediateTableModeEnabled();
        if (!isIntermediateTableModeEnabled) {
            //Get Incident linked to Support Case
            var incidentGr = new GlideRecord('incident');
            incidentGr.addQuery('sys_id', sysId);
            incidentGr.query();
            if (incidentGr.next()) {
                //Update Incident without triggering automatic mechanisms
                incidentGr.setWorkflow(false);
                Util.setValue(incidentGr, "work_notes", message);
                incidentGr.update();
            }
        }
    };
    SupportCaseRepo.prototype.isIntermediateTableModeEnabled = function () {
        return gs.getProperty(C.sysprop.intermediateTableMode) === "true";
    };
    return SupportCaseRepo;
}());
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-05 09:12:10</sys_created_on>
        <sys_id>335dae152fbd301084a1d6ab2799b6c4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SupportCaseRepo</sys_name>
        <sys_package display_value="AWS Service Management Connector - 4.7.7" source="x_126749_aws_sc">f0b117a3db32320093a7d7a0cf961912</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AWS Service Management Connector - 4.7.7">f0b117a3db32320093a7d7a0cf961912</sys_scope>
        <sys_update_name>sys_script_include_335dae152fbd301084a1d6ab2799b6c4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-15 10:10:29</sys_updated_on>
    </sys_script_include>
</record_update>
