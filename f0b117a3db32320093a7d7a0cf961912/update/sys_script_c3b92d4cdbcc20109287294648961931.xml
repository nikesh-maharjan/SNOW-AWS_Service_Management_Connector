<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_126749_aws_sc_finding</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Update Problems and Incidents From Findi</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[// @Deployable({table: 'sys_script', column: 'script', sysId: 'c3b92d4cdbcc20109287294648961931'})
/**
 * SecurityHub Sync AWS Findings on Update
 *
 * When an update is mode to a record in the Findings table, sync those changes
 * to AWS.
 *
 * Updates created by the syncing from AWS to SN are filtered by ignoring where
 * the fields: "Updated" (SN field) >= "Updated At" (Findings field)
 */
(function executeRule(current, previous /*null when async*/) {
    // only sync to AWS if fields we want to write back are changed
    if ((current.getValue('awsseveritylabel') !== previous.getValue('awsseveritylabel'))
        || (current.getValue('awsworkflowstatus') !== previous.getValue('awsworkflowstatus'))) {
        new SecurityHubSyncProvider().updateAws(current);
    }
    // Update any associated Problem
    var problemRepo = new ProblemRepo();
    if (current.awsproblem || problemRepo.shouldCreateOrUpdateFromFinding(current)) {
        problemRepo.insertOrUpdateFromFinding(current);
    }
    // Update any associated Incident
    var incidentRepo = new IncidentRepo();
    if (current.awsincident || incidentRepo.shouldCreateIncidentFromFinding(current)) {
        try {
            incidentRepo.insertOrUpdateFromFinding(current);
        }
        catch (e) {
            gs.addErrorMessage(e);
        }
    }
})(current, previous);
]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-10-19 11:06:55</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c3b92d4cdbcc20109287294648961931</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update Problems and Incidents From Findi</sys_name>
        <sys_overrides/>
        <sys_package display_value="AWS Service Management Connector - 4.7.7" source="x_126749_aws_sc">f0b117a3db32320093a7d7a0cf961912</sys_package>
        <sys_policy/>
        <sys_scope display_value="AWS Service Management Connector - 4.7.7">f0b117a3db32320093a7d7a0cf961912</sys_scope>
        <sys_update_name>sys_script_c3b92d4cdbcc20109287294648961931</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-15 10:10:29</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=c3b92d4cdbcc20109287294648961931"/>
</record_update>
