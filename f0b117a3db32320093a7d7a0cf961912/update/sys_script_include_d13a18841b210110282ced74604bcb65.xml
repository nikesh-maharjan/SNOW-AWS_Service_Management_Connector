<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_126749_aws_sc.SupportSqsSyncProvider</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>SupportSqsSyncProvider</name>
        <script><![CDATA[var SupportSqsSyncProvider = /** @class */ (function (_super) {
    Polyfill.__extends(SupportSqsSyncProvider, _super);
    function SupportSqsSyncProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.providerName = 'AWS Support (Cases)';
        _this.timeout = 60;
        return _this;
    }
    SupportSqsSyncProvider.prototype.getQueueName = function () {
        return gs.getProperty(C.sysprop.supportSQSName);
    };
    SupportSqsSyncProvider.prototype.getMaxMessages = function () {
        return 50; // same default as used in JSM Connector (c.f. NUMBER_MESSAGES_TO_PULL_SECURITY_HUB)
    };
    SupportSqsSyncProvider.prototype.getIntermediateTableMode = function () {
        return gs.getProperty(C.sysprop.intermediateTableMode) === "true";
    };
    SupportSqsSyncProvider.prototype.fromAws = function (context) {
        var syncResults = {
            success: true,
            seconds: 0,
            requests: 0
        };
        var account = new GlideRecord("x_126749_aws_sc_account");
        account.addQuery('awsenablesupport', 'true');
        account.query();
        while (account.next()) {
            try {
                var region;
				if(Util.isGovCloudAccount(account.sys_id.toString())){
					region = "us-gov-west-1";
				} else if(Util.isBeijingRegionAccount(account.sys_id.toString())){
					region = "cn-north-1";
				} else if(Util.isNingxiaRegionAccount(account.sys_id.toString())) {
					region = "cn-northwest-1";
				} else {
					region = "us-east-1";
				}
                var partialResults = this.fromAwsWith(account, region);
                if (partialResults.error) {
                    this.logSyncResultWarnings(partialResults, account, this.providerName, this.timeout, region);
                }
                gs.info([
                    "[SYNC] [STATS] [".concat(this.providerName, "] Finished synchronization for ") +
                        "account \"".concat(account.awsname.toString(), "\" (").concat(account.awsaccountnumber.toString(), ")"),
                    "** Success: ".concat(partialResults.success),
                    "** Time: ".concat(partialResults.seconds.toFixed(1), "s"),
                    "** Requests: ".concat(partialResults.requests)
                ].join('\n'));
                syncResults.success = syncResults.success && partialResults.success;
                syncResults.seconds += partialResults.seconds;
                syncResults.requests += partialResults.requests;
            }
            catch (ex) {
                // If we end up here, it means this is an unexpected/uncaught exception. We don't want to fail the
                // whole process to we catch big, and log a warning
                gs.warn("[SYNC] [".concat(this.providerName, "] Unexpected error occurred while synchronizing ") +
                    "account \"".concat(account.awsname.toString(), "\" (").concat(account.awsaccountnumber.toString(), "):\n") +
                    "".concat(ex.message));
            }
        }
        return syncResults;
    };
    SupportSqsSyncProvider.prototype.fromAwsWith = function (account, region) {
        var syncResults = {
            success: true,
            seconds: 0,
            requests: 0
        };
        var timer = Util.startTimer();
        var credentials = AwsCredentials.from(account).as(AwsCredentials.User.Sync);
        var awsSqs = this.awsSqs(region, credentials);
        var handlers = this.eventHandlers(account);
        var queueName = this.getQueueName();
        var maxMessages = this.getMaxMessages();
        var isIntermediateTableModeEnabled = this.getIntermediateTableMode();
        try {
            this.doSyncSupport(account, awsSqs, queueName, maxMessages, isIntermediateTableModeEnabled, handlers);
        }
        catch (ex) {
            syncResults.success = false;
            syncResults.error = ex.message;
        }
        syncResults.seconds = timer.elapsed();
        syncResults.requests = awsSqs.getRequestCount();
        return syncResults;
    };
    SupportSqsSyncProvider.prototype.awsSqs = function (region, credentials) {
        return new AwsSqs(region, credentials, this.timeout);
    };
    SupportSqsSyncProvider.prototype.fromSn = function (context) {
        return {
            success: true,
            seconds: 0,
            requests: 0,
        };
    };
    SupportSqsSyncProvider.prototype.validate = function () {
        if (!Util.tableActionEnabled("incident", true, true, true)) {
            gs.error("[SYNC] [".concat(this.providerName, "] Validation failed: scoped application requires read, create and update permissions on \"Incident\" table."));
            return false;
        }
        return true;
    };
    SupportSqsSyncProvider.prototype.doSyncSupport = function (account, awsSqs, queueName, maxMessages, isIntermediateTableModeEnabled, handlers) {
        var _this = this;
        if (isIntermediateTableModeEnabled === void 0) { isIntermediateTableModeEnabled = false; }
        var messageCounter = 0;
        var awsSqsMessages;
        gs.debug("[Sync] [".concat(this.providerName, "] Synchronizing from AWS Support"));
        do {
            awsSqsMessages = this.getAwsSqsMessages(awsSqs, queueName, account, maxMessages - messageCounter);
            awsSqsMessages
                .forEach(function (awsSqsMessage) {
                messageCounter++;
                _this.getSupportCaseEvents(awsSqsMessage)
                    .forEach(function (supportCaseEvent) { return handlers.handle(supportCaseEvent, isIntermediateTableModeEnabled); });
                _this.deleteSqsMessage(awsSqs, awsSqsMessage, account, queueName);
            });
        } while (awsSqsMessages.length > 0 && messageCounter < maxMessages);
    };
    SupportSqsSyncProvider.prototype.getAwsSqsMessages = function (awsSqs, queueName, account, maxMessages) {
        var accountNumber = account.awsaccountnumber.toString();
        var messagesToFetch = Math.min(10, maxMessages);
        var response = awsSqs.getSqsMessages(accountNumber, queueName, messagesToFetch);
        if (response.haveError()) {
            var readingErrorString = "Error getting support case events";
            gs.error(readingErrorString + ": " + response.getErrorMessage());
            throw new Error(readingErrorString);
        }
        var data = response.data();
        var messages = AwsSqs.asArray(data);
        gs.debug("[SYNC] [".concat(this.providerName, "] getSQSMessages: ").concat(messages.length, " messages retrieved"));
        return messages;
    };
    SupportSqsSyncProvider.prototype.getSupportCaseEvents = function (sqsMessage) {
        try {
            return this.doGetSupportCaseEvents(sqsMessage);
        }
        catch (e) {
            gs.error("[SYNC] [".concat(this.providerName, "] Error parsing Support Case Event from SQS: ").concat(e.message));
            return [];
        }
    };
    SupportSqsSyncProvider.prototype.doGetSupportCaseEvents = function (sqsMessage) {
        var update = JSON.parse(sqsMessage.Body);
        if (update["detail-type"] === 'Support Case Update') {
            var region = update.region;
            var detail = update.detail;
            var eventName = detail["event-name"];
            var caseId = detail["case-id"];
            // if there is no caseId or eventName we discard the message
            return (caseId && eventName)
                ? [{ eventName: eventName, region: region, caseId: caseId }]
                : [];
        }
        return []; // unknown update type
    };
    SupportSqsSyncProvider.prototype.eventHandlers = function (account) {
        var awsSupport = SupportService.getAwsSupport(account);
        var supportService = new SupportService();
        var map = {
            "CreateCase": new SupportCreateEventHandler(awsSupport, supportService, account),
            "AddCommunicationToCase": new SupportCommunicationEventHandler(awsSupport, supportService, account),
            "ReopenCase": new SupportReopenEventHandler(awsSupport, supportService),
            "ResolveCase": new SupportResolveEventHandler(awsSupport, supportService),
        };
        return {
            handle: function (supportCaseEvent, isIntermediateTableModeEnabled) {
                var handler = map[supportCaseEvent.eventName];
                handler && handler.handle(supportCaseEvent, isIntermediateTableModeEnabled);
            }
        };
    };
    SupportSqsSyncProvider.prototype.deleteSqsMessage = function (awsSqs, awsSqsMessage, account, queueName) {
        try {
            this.doDeleteSQSMessage(awsSqs, awsSqsMessage, account, queueName);
        }
        catch (e) {
            gs.error("[SYNC] [".concat(this.providerName, "] Error deleting message from SQS: ").concat(e.message));
        }
    };
    SupportSqsSyncProvider.prototype.doDeleteSQSMessage = function (awsSqs, awsSqsMessage, account, queueName) {
        var response = awsSqs.deleteMessage(account.awsaccountnumber, queueName, awsSqsMessage.ReceiptHandle);
        if (response.haveError()) {
            var deletingErrorString = "Error deleting Support Case Event message";
            gs.error("[SYNC] [".concat(this.providerName, "] ").concat(deletingErrorString, " : ").concat(response.getErrorMessage()));
            throw new Error(deletingErrorString);
        }
    };
    return SupportSqsSyncProvider;
}(AbstractSyncProvider));
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-02-03 11:11:50</sys_created_on>
        <sys_id>d13a18841b210110282ced74604bcb65</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>SupportSqsSyncProvider</sys_name>
        <sys_package display_value="AWS Service Management Connector - 4.7.7" source="x_126749_aws_sc">f0b117a3db32320093a7d7a0cf961912</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AWS Service Management Connector - 4.7.7">f0b117a3db32320093a7d7a0cf961912</sys_scope>
        <sys_update_name>sys_script_include_d13a18841b210110282ced74604bcb65</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-14 18:37:25</sys_updated_on>
    </sys_script_include>
</record_update>
