<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_126749_aws_sc.ECSClusterResourceType</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ECSClusterResourceType</name>
        <script><![CDATA[var ECSClusterResourceType = /** @class */ (function(_super) {
    Polyfill.__extends(ECSClusterResourceType, _super);

    function ECSClusterResourceType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ECSClusterResourceType.prototype.rules = function() {
        return [{
            order: 45,
            syncType: ConfigSyncProvider.SYNC_DIR.FROM_AWS_CONFIG,
            externalResourceType: 'AWS::ECS::Cluster',
            externalResourceId: 'resourceId',
            snTable: 'cmdb_ci_cloud_ecs_cluster',
            syncFromAws: this.syncFromAws,
        }];
    };
    ECSClusterResourceType.prototype.fields = function() {
        return [{
            mode: ConfigSyncProvider.FieldMode.FromAws,
            snField: 'name',
            transformFromAws: function(object, context) {
                return (context && context.resourceIdAsName) || !object.item.resourceName ?
                    object.item.resourceId : object.item.resourceName;
            }
        }];
    };
    ECSClusterResourceType.prototype.relationships = function() {
        return [{
            relationship: ConfigSyncProvider.RelationshipType.HostedOn,
            externalResourceType: 'AWS::Region',
            snTable: 'cmdb_ci_aws_datacenter',
            documentationOnly: true,
        }];
    };
    ECSClusterResourceType.prototype.syncFromAwsAddRelationships = function(context, config, resourceSysId) {
        // Process relationships to AWS regions
        this.addHostedOnRegionRelationship(context, config, resourceSysId);
    };
    // the payload from AWS Config for API gateway has a tag attribute within configuration all the time, which has the incorrect details.
    //tags that we want to process for API gateway is available within _config.item, hence setting as below
    ECSClusterResourceType.prototype.getResourceTags = function(_config) {
        return _config.item.tags || [];
    };
    return ECSClusterResourceType;
}(AbstractResourceType));]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-11 03:58:08</sys_created_on>
        <sys_id>c4b6000a97d82110c830fbc71153aff9</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>ECSClusterResourceType</sys_name>
        <sys_package display_value="AWS Service Management Connector - 4.7.7" source="x_126749_aws_sc">f0b117a3db32320093a7d7a0cf961912</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AWS Service Management Connector - 4.7.7">f0b117a3db32320093a7d7a0cf961912</sys_scope>
        <sys_update_name>sys_script_include_c4b6000a97d82110c830fbc71153aff9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-02-09 20:38:26</sys_updated_on>
    </sys_script_include>
</record_update>
