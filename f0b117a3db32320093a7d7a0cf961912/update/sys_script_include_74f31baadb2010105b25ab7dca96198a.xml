<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_126749_aws_sc.DocumentRepo</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>DocumentRepo</name>
        <script><![CDATA[var DocumentRepo = /** @class */ (function () {
    function DocumentRepo() {
        this.TABLE_NAME = 'x_126749_aws_sc_document';
    }
    DocumentRepo.prototype.lastUpdatedFieldName = function () {
        return 'awslastsynctime';
    };
    DocumentRepo.prototype.idFieldName = function () {
        return 'sys_id';
    };
    DocumentRepo.prototype.createRecord = function () {
        return new GlideRecord(this.TABLE_NAME);
    };
    DocumentRepo.prototype.get = function (id) {
        var _a;
        var result = Util.failure("Record with id " + id + " not found");
        this.findByFieldValue((_a = {}, _a[this.idFieldName()] = id, _a))
            .forEach(function (record) { return result = Util.success(record); });
        return result;
    };
    DocumentRepo.prototype.insert = function (record) {
        // Set category
        var documentCategory = DocumentRepo.getDocumentCategory(record.awstype.toString());
        if (documentCategory) {
            record.category = documentCategory.sys_id.toString();
        }
        // Set workflow
        var workflow = DocumentRepo.getExecutionWorkflow();
        Util.setValue(record, 'workflow', workflow.sys_id);
        record.insert();
        // Associate the variable set and user criteria.
        var variableSet = this._getVariableSet(record.awstype.toString());
        if (variableSet) {
            this._attachVariableSet(record.sys_id.toString(), variableSet.sys_id.toString());
        }
    };
    DocumentRepo.prototype.save = function (record) {
        var _a;
        var _this = this;
        this.findByFieldValue((_a = {}, _a[this.idFieldName()] = record.sys_id.toString(), _a))
            .forEach(function (_) { return _this.update(record); })
            .ifNone(function () { return _this.insert(record); });
    };
    DocumentRepo.prototype.update = function (record) {
        record.update();
    };
    DocumentRepo.prototype.initialiseNewRecord = function () {
        var record = this.createRecord();
        record.initialize();
        return record;
    };
    DocumentRepo.prototype.query = function (applyCriteria) {
        var _this = this;
        var invokeQuery = function () {
            var record = _this.createRecord();
            applyCriteria(record);
            record.query();
            return record;
        };
        return {
            forEach: function (handler) {
                var record = invokeQuery();
                var count = 0;
                while (record.next()) {
                    handler(record);
                    count++;
                }
                return {
                    ifNone: function (ifNone) {
                        if (count === 0) {
                            ifNone();
                        }
                    }
                };
            }
        };
    };
    DocumentRepo.prototype.findByFieldValue = function (fields) {
        return this.query(function (s) {
            Object.keys(fields).forEach(function (key) {
                s.addQuery(key, '=', fields[key]);
            });
        });
    };
    DocumentRepo.prototype.deleteExpired = function (dateTime) {
        var lastUpdated = this.lastUpdatedFieldName();
        var count = 0;
        this.query(function (s) { return s.addQuery(lastUpdated, '<', dateTime); })
            .forEach(function (record) {
            record.deleteRecord();
            count++;
        });
        return count;
    };
    DocumentRepo.prototype.deleteRecord = function (id) {
        var _a;
        var deleted = false;
        this.findByFieldValue((_a = {}, _a[this.idFieldName()] = id, _a))
            .forEach(function (record) {
            record.deleteRecord();
            deleted = true;
        });
        return deleted;
    };
    DocumentRepo.prototype._getVariableSet = function (awstype) {
        var variableSetGr = new GlideRecord('item_option_new_set');
        // Could obtain this from a system property.
        var variableSetName = awstype === 'Automation'
            ? 'AWS Systems Manager Automation Variables'
            : 'AWS Systems Manager Change Manager Variables';
        if (variableSetGr.get('title', variableSetName)) {
            return variableSetGr;
        }
        return null;
    };
    DocumentRepo.prototype._attachVariableSet = function (catalogItemId, variableSetId) {
        var m2m = new sn_sc.CatalogItemVariableSetM2M();
        m2m.setAttributes({
            sc_cat_item: catalogItemId,
            variable_set: variableSetId
        });
        m2m.create(true);
    };
    DocumentRepo.getDocumentCategory = function (awstype) {
        var categoryProperty = awstype === 'Automation'
            ? gs.getProperty(C.sysprop.automationDocumentCategory)
            : gs.getProperty(C.sysprop.changeTemplateCategory);
        if (categoryProperty) {
            var categoryGr = new GlideRecord('sc_category');
            if (categoryGr.get(categoryProperty) || categoryGr.get('title', categoryProperty)) {
                return categoryGr;
            }
        }
        return null;
    };
    DocumentRepo.getExecutionWorkflow = function () {
        var wf = Util.getWorkflow(C.sysprop.workflow.execution);
        if (!wf) {
            throw new Error("Configuration error, please configure workflow name in system property: " + C.sysprop.workflow.execution);
        }
        return wf;
    };
    return DocumentRepo;
}());
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-06 13:32:14</sys_created_on>
        <sys_id>74f31baadb2010105b25ab7dca96198a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DocumentRepo</sys_name>
        <sys_package display_value="AWS Service Management Connector - 4.7.7" source="x_126749_aws_sc">f0b117a3db32320093a7d7a0cf961912</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AWS Service Management Connector - 4.7.7">f0b117a3db32320093a7d7a0cf961912</sys_scope>
        <sys_update_name>sys_script_include_74f31baadb2010105b25ab7dca96198a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-15 10:10:29</sys_updated_on>
    </sys_script_include>
</record_update>
