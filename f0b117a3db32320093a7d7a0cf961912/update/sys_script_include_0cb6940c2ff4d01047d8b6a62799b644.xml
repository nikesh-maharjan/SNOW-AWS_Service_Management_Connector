<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_126749_aws_sc.Executioner</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Executioner</name>
        <script><![CDATA[/**
 * @class Executioner
 * @classdesc Support for a workflow on sc_req_item table, for execution an automation document from AWS Systems Manager
 *
 * Use in a workflow as a "Run Script" step with script definition:
 * <pre>
 *     const executioner = new Executioner(workflow, context, activity, current);
 *     executioner.requestExecution();
 * </pre>
 */
var Executioner = /** @class */ (function () {
    /**
     * @param workflow The 'workflow' variable from ServiceNow
     * @param context  The 'context' variable from ServiceNow
     * @param activity The current 'activity' variable from ServiceNow
     * @param current The 'current' variable itself from ServiceNow (a GlideRecord on sc_req_item)
     */
    function Executioner(workflow, context, activity, current) {
        this.workflow = workflow;
        this.scratchpad = workflow.scratchpad;
        this.activity = activity;
        this.scReqItemGR = current;
    }
    /**
     * Request a new execution of an AWS Automation Document.
     */
    Executioner.prototype.requestExecution = function () {
        this.scratchpad.invoke_attempts += 1;
        var maxRetries = this.scratchpad.retries_permitted, attempts = this.scratchpad.invoke_attempts;
        var catalogProduct = this._getCatalogProduct();
        if (!catalogProduct) {
            return this._fail("Requested item ".concat(this.scReqItemGR.sys_id.toString(), " is not an Automation Document"));
        }
        var result;
        try {
            result = this._executeDocument();
        }
        catch (e) {
            return this._fail(e.message);
        }
        if (result.success === true) {
            this.scReqItemGR.configuration_item = this.automationExecution.sys_id.toString();
            this.scReqItemGR.update();
            var message = 'Execution of the automation document requested from AWS';
            Util.createRequestItemComment(this.automationExecution, message);
            return this._succeed();
        }
        else if (result.isRetryable && attempts < maxRetries) {
            return this._retry();
        }
        else if (result.isRetryable) {
            var message = "Failed to execution automation document after ".concat(maxRetries, " attempts. Last failure was: ").concat(result.reason);
            Util.createRequestItemComment(this.automationExecution, message);
            return this._fail(message);
        }
        else {
            return this._fail(result.reason);
        }
    };
    /**
     * Executes an automation document.
     */
    Executioner.prototype._executeDocument = function () {
        var catalogProduct = this._getCatalogProduct();
        var itemVariables = this.scReqItemGR.variables;
        var region = catalogProduct.awsregion.toString();
        var documentName = itemVariables.DocumentName.toString();
        var documentVersion = itemVariables.DocumentVersion.toString();
        var userId = this.scReqItemGR.getValue('opened_by');
        var userName = this.scReqItemGR.opened_by.user_name.toString();
        // Try to fail early
        var maybeParams = Util.tryParseJson(Util.getDecryptedValue(itemVariables.Parameters), 'parameters');
        if (maybeParams.success === false) {
            return maybeParams;
        }
        var maybeTags = Util.tryParseJson(itemVariables.Tags, 'tags');
        if (maybeTags.success === false) {
            return maybeTags;
        }
        var credentialsEndUser;
        var credentialsSyncUser;
        try {
            credentialsEndUser = AwsCredentials.from(catalogProduct).as(AwsCredentials.User.End);
            credentialsSyncUser = AwsCredentials.from(catalogProduct).as(AwsCredentials.User.Sync);
        }
        catch (ex) {
            return Util.failure("Could not establish credentials for ".concat(userName, ": ").concat(ex.message));
        }
        this.workflow.info("Requesting execution of document ".concat(documentName, " (version ").concat(documentVersion, " in ").concat(region, " for ").concat(userName));
        var awsSystemsManager = new AwsSystemsManager(region, credentialsEndUser);
        var executionResponse = awsSystemsManager.startAutomationExecution(documentName, documentVersion, Object.keys(maybeParams.result).length > 0 ? maybeParams.result : null, maybeTags.result);
        if (executionResponse.haveError()) {
            if (executionResponse.isRequestRetryable()) {
                return Util.failure('Retryable failure execution document', true);
            }
            return Util.failure(Util.explainError(executionResponse.deserialize()));
        }
        var body = executionResponse.deserialize();
        var automationExecutionRecord = AutomationExecutionRepo.createAutomationExecutionFromId(body.AutomationExecutionId, catalogProduct.awsaccount, catalogProduct.awsregion, catalogProduct.name, catalogProduct.awsversionname, userId);
        this.automationExecution = automationExecutionRecord;
        // If we need to associate this execution to an OpsItem, then we do it now. However, any failure
        // *should not* trigger a workflow failure, nor a retry of the workflow, otherwise it will execute the document again!
        // Instead, we will skip any failure and log the error into the workflow logs
        if (!itemVariables.OpsItemId.nil()) {
            this._associateAutomationExecutionToOpsItem(documentName, body.AutomationExecutionId, itemVariables.OpsItemId.toString(), new AwsSystemsManager(region, credentialsSyncUser));
        }
        return Util.success(body);
    };
    Executioner.prototype._succeed = function () {
        this.workflow.info('Document is executing');
        this.activity.result = 'yes';
        AutomationExecutionRepo.updateWithStatus(this.automationExecution, 1 /* OK */);
    };
    Executioner.prototype._retry = function () {
        this.activity.result = 'retry';
    };
    Executioner.prototype._fail = function (message) {
        this.workflow.warn("Error sending execution request: ".concat(message));
        this.activity.result = 'no';
        if (this.automationExecution) {
            AutomationExecutionRepo.updateWithStatus(this.automationExecution, 2 /* ERROR */, message);
        }
    };
    Executioner.prototype._getCatalogProduct = function () {
        var catalogProduct = new GlideRecord('x_126749_aws_sc_document');
        if (catalogProduct.get(this.scReqItemGR.cat_item.toString())) {
            return catalogProduct;
        }
        return null;
    };
    Executioner.prototype._associateAutomationExecutionToOpsItem = function (documentName, executionId, opsItemId, awsSystemsManager) {
        var prefix = "Failed to associate automation execution \"".concat(executionId, "\" to the OpsItem \"").concat(opsItemId, "\"");
        var getOpsItemResponse = awsSystemsManager.getOpsItem(opsItemId);
        if (getOpsItemResponse.haveError()) {
            this.workflow.error("".concat(prefix, ": ").concat(Util.explainError(getOpsItemResponse.deserialize())));
            return;
        }
        var awsAutomationKey = '/aws/automations';
        var operationalData = getOpsItemResponse.deserialize().OperationalData;
        if (!operationalData) {
            operationalData = {};
        }
        if (!operationalData.hasOwnProperty(awsAutomationKey)) {
            operationalData[awsAutomationKey] = {
                Value: '[]',
                Type: 'SearchableString'
            };
        }
        var awsAutomations = JSON.parse(operationalData[awsAutomationKey].Value);
        if (!awsAutomations.some(function (automationAssociation) { return automationAssociation.automationId === documentName; })) {
            awsAutomations.push({
                automationId: documentName,
                automationType: 'AWS::SSM::Automation',
                executions: []
            });
        }
        awsAutomations
            .filter(function (automationAssociation) { return automationAssociation.automationId === documentName; })
            .forEach(function (automationAssociation) { return automationAssociation.executions.push({
            executionId: executionId
        }); });
        operationalData[awsAutomationKey].Value = JSON.stringify(awsAutomations);
        var updateOpsItemResponse = awsSystemsManager.updateOpsItem({
            OpsItemId: opsItemId,
            OperationalData: operationalData
        });
        if (updateOpsItemResponse.haveError()) {
            this.workflow.error("".concat(prefix, ": ").concat(Util.explainError(updateOpsItemResponse.deserialize())));
            return;
        }
    };
    return Executioner;
}());
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-10 15:36:00</sys_created_on>
        <sys_id>0cb6940c2ff4d01047d8b6a62799b644</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Executioner</sys_name>
        <sys_package display_value="AWS Service Management Connector - 4.7.7" source="x_126749_aws_sc">f0b117a3db32320093a7d7a0cf961912</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AWS Service Management Connector - 4.7.7">f0b117a3db32320093a7d7a0cf961912</sys_scope>
        <sys_update_name>sys_script_include_0cb6940c2ff4d01047d8b6a62799b644</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-15 10:10:29</sys_updated_on>
    </sys_script_include>
</record_update>
