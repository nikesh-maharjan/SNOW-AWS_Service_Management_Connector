<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_126749_aws_sc.ProvisionedProductRepo</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ProvisionedProductRepo</name>
        <script><![CDATA[/**
 * A structure that has the parts of a RecordDetail that can be used to create
 * a new provisioned product record. Overlaps with many other object structures,
 * for example CreateProvisionedProductPlanOutput.
 */
var ProvisionedProductRepo = /** @class */ (function () {
    function ProvisionedProductRepo() {
    }
    /**
     * Create an initial record of a provisioned product, with minimal details.
     *
     * @param name {string} Name of the ProvisionedProductDetail to create
     * @param region {string} Region where the product is provisioned
     * @param ownedBy {string} Sys ID of the user that owns the product
     * @param sessionName {string} The name to use for future STS sessions for the product
     *
     * @return {GlideRecord} The GlideRecord object for the saved data
     * @deprecated since v2.0 Use createProvisionedProductFromRecordDetail instead.
     */
    ProvisionedProductRepo.createProvisionedProduct = function (name, region, ownedBy, sessionName) {
        var scp = new GlideRecord('x_126749_aws_sc_cmdb_ci_pp');
        scp.initialize();
        scp.awscreatedtime = new GlideDateTime();
        scp.name = name;
        scp.awsname = name;
        scp.awsregion = region;
        scp.awsstatus = "UNDER_CHANGE";
        scp.awsstssessionname = sessionName;
        scp.owned_by = ownedBy;
        scp.insert();
        return scp;
    };
    /**
     * Create a provisioned product with columns populated from the arguments, in particular
     * details, which is expected to have properties PathId, ProductId, ProvisionedProductName
     * and ProvisioningArtifactId.
     *
     * @return {GlideRecord} The GlideRecord object for the new provisioned product
     */
    // TODO: Remove session name
    ProvisionedProductRepo.createProvisionedProductFromRecordDetail = function (product, ownedBy, sessionName, parameters, productStatus, awsStatus) {
        var scp = new GlideRecord('x_126749_aws_sc_cmdb_ci_pp');
        scp.initialize();
        scp.name = parameters.ProvisionedProductName;
        scp.awsname = parameters.ProvisionedProductName;
        scp.awsproductid = parameters.ProductId;
        scp.awsprovisioningartifactid = parameters.ProvisioningArtifactId;
        scp.owned_by = ownedBy;
        scp.awsstssessionname = sessionName;
        scp.awsregion = product.awsregion;
        if (productStatus) {
            scp.awsproductstatus = productStatus;
        }
        if (awsStatus) {
            scp.awsstatus = awsStatus;
        }
        scp.insert();
        return scp;
    };
    /**
     * Create a record in x_126749_aws_sc_pp_plan with the output from a
     * CreateProvisionedProductPlan request and associate it with pp.
     */
    ProvisionedProductRepo.createProvisionedProductPlan = function (pp, createOutput) {
        var planGr = new GlideRecord('x_126749_aws_sc_pp_plan');
        planGr.initialize();
        planGr.awsstatus = 'CREATE_IN_PROGRESS';
        planGr.awsplanid = createOutput.PlanId;
        planGr.awsplanname = createOutput.PlanName;
        planGr.awsprovisionproductid = createOutput.ProvisionProductId;
        planGr.awsprovisionproductname = createOutput.ProvisionedProductName;
        planGr.awsprovisioningartifactid = createOutput.ProvisioningArtifactId;
        planGr.awsproduct = pp.sys_id;
        planGr.insert();
        pp.awsplan = planGr.sys_id;
        pp.update();
        return planGr;
    };
    /**
     * Create a record in x_126749_aws_sc_pp_plan_rc and associate it with plan.
     */
    ProvisionedProductRepo.createPlanResourceChange = function (plan, change) {
        var planResourceChangeGr = new GlideRecord('x_126749_aws_sc_pp_plan_rc');
        planResourceChangeGr.initialize();
        planResourceChangeGr.awsaction = change.Action;
        planResourceChangeGr.awslogicalresourceid = change.LogicalResourceId;
        planResourceChangeGr.awsphysicalresourceid = change.PhysicalResourceId;
        planResourceChangeGr.awsplan = plan.sys_id;
        planResourceChangeGr.awsreplacement = change.Replacement;
        planResourceChangeGr.awsresourcetype = change.ResourceType;
        if (Array.isArray(change.Scope) && change.Scope.length > 0) {
            planResourceChangeGr.awsscope = JSON.stringify(change.Scope);
        }
        planResourceChangeGr.insert();
        return planResourceChangeGr;
    };
    ProvisionedProductRepo.updateProvisionedProduct = function (recordDetail, ppGR, awsAccountSysId, productStatus) {
        if (arguments.length == 3) {
            productStatus = arguments[2];
        }
        ppGR.awsproductid = recordDetail.ProductId;
        ppGR.awsproductstatus = productStatus;
        ppGR.awscreatedtime = Util.toGlideDateTime(recordDetail.CreatedTime);
        ppGR.awsid = recordDetail.ProvisionedProductId;
        ppGR.name = recordDetail.ProvisionedProductName;
        ppGR.awsname = recordDetail.ProvisionedProductName;
        ppGR.awstype = recordDetail.ProvisionedProductType;
        ppGR.awsprovisioningartifactid = recordDetail.ProvisioningArtifactId;
        ppGR.update();
        return ppGR;
    };
    /**
     * Update the record of a provisioned product plan with details from AWS.
     * @param planGr {GlideRecord} Record to update
     * @param details {Object} Result of a DescribeProvisionedProductPlan request.
     */
    ProvisionedProductRepo.updateProvisionedProductPlan = function (planGr, details) {
        planGr.awscreatedtime = Util.toGlideDateTime(details.CreatedTime);
        planGr.awspathid = details.PathId;
        planGr.awsplanid = details.PlanId;
        planGr.awsplanname = details.PlanName;
        planGr.awsplantype = details.PlanType;
        planGr.awsproductid = details.ProductId;
        planGr.awsprovisioningartifactid = details.ProvisioningArtifactId;
        planGr.awsprovisionproductid = details.ProvisionProductId;
        planGr.awsprovisionproductname = details.ProvisionProductName;
        planGr.awsstatus = details.Status;
        Util.setValue(planGr, 'awsstatusmessage', details.StatusMessage);
        planGr.awsupdatedtime = Util.toGlideDateTime(details.UpdatedTime);
        // ServiceNow metadata
        planGr.awslastsynctime = new GlideDateTime();
        planGr.awssyncstatus = 1 /* OK */;
        planGr.update();
        return planGr;
    };
    /**
     * Sets status and issues a database update
     *
     * @param provisionedProductGR {GlideRecord} Record to update
     * @param productStatus {number} Status to give the record
     * @param [message] {string} Optional error status message
     */
    ProvisionedProductRepo.updateWithStatus = function (provisionedProductGR, productStatus, message) {
        provisionedProductGR.awsproductstatus = productStatus;
        if (message) {
            provisionedProductGR.awsstatusmessage = message;
        }
        provisionedProductGR.update();
        return provisionedProductGR;
    };
    /**
     * A utility function to copy details from recordDetail to the pp GlideRecord.
     * Copies only details that are required both for create and update operations,
     * so that this function can avoid code duplication between those operations.
     *
     * @param pp {GlideRecord} GlideRecord of a provisioned product event.
     * @param recordDetail {Object} from an update or similar operation that modifieds the event.
     */
    ProvisionedProductRepo.copyDetails = function (pp, recordDetail) {
        pp.awspathid = recordDetail.PathId;
        pp.awsproductid = recordDetail.ProductId;
        pp.awsprovisionedproductid = recordDetail.ProvisionedProductId;
        pp.awsprovisionedproductname = recordDetail.ProvisionedProductName;
        pp.awsprovisionedproducttype = recordDetail.ProvisionedProductType;
        pp.awsprovisioningartifactid = recordDetail.ProvisioningArtifactId;
        pp.awsrecordid = recordDetail.RecordId;
        pp.awsrecordtype = recordDetail.RecordType;
        pp.awsstatus = recordDetail.Status;
        pp.awsupdatedtime = Util.toGlideDateTime(recordDetail.UpdatedTime);
        return pp;
    };
    ProvisionedProductRepo.createProvisionedProductEvent = function (pp, recordId, submissionStatus) {
        var evt = new GlideRecord('x_126749_aws_sc_pp_event');
        evt.initialize();
        evt.awsproduct = pp.sys_id;
        evt.awsrecordid = recordId;
        if (submissionStatus) {
            evt.awssubmissionstatus = submissionStatus;
        }
        evt.insert();
        return evt;
    };
    /**
     * Save an event detail for a provisioned product.
     *
     * @param awsSCProductGR {GlideRecord} GlideRecord of the provisioned product
     * @param recordDetail {Object} RecordDetail from a provisioning request or describeRequest.
     */
    ProvisionedProductRepo.saveProvisionedProductEvent = function (awsSCProductGR, recordDetail) {
        var ppEventGR = new GlideRecord('x_126749_aws_sc_pp_event');
        ppEventGR.initialize();
        ppEventGR.awscreatedtime = Util.toGlideDateTime(recordDetail.CreatedTime);
        ppEventGR.awsproduct = awsSCProductGR.sys_id;
        this.copyDetails(ppEventGR, recordDetail);
        ppEventGR.insert();
        return ppEventGR;
    };
    /**
     * Updates an event detail for a provisioned product.
     *
     * @param recordDetail {Object} RecordDetail from an update or similar operation that modifieds the product.
     * @param ppEventGR {GlideRecord} GlideRecord of the provisioned product event
     */
    ProvisionedProductRepo.updateProvisionedProductEvent = function (recordDetail, ppEventGR) {
        this.copyDetails(ppEventGR, recordDetail);
        ppEventGR.update();
        return ppEventGR;
    };
    return ProvisionedProductRepo;
}());
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-10-17 17:11:19</sys_created_on>
        <sys_id>365c9cb6db3d0300a5d3ddd0cf9619f0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ProvisionedProductRepo</sys_name>
        <sys_package display_value="AWS Service Management Connector - 4.7.7" source="x_126749_aws_sc">f0b117a3db32320093a7d7a0cf961912</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AWS Service Management Connector - 4.7.7">f0b117a3db32320093a7d7a0cf961912</sys_scope>
        <sys_update_name>sys_script_include_365c9cb6db3d0300a5d3ddd0cf9619f0</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-15 10:10:29</sys_updated_on>
    </sys_script_include>
</record_update>
