<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_126749_aws_sc_account</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Populate Account Number</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[/**
 @Deployable({
     table: 'sys_script',
     column: 'script',
     sysId: '6f569f301b40101039ed877ddc4bcb23',
       metadata: {
        when: 'async_always'
    }
 })
 */
/**
 * Populate the new awsaccountnumber field when a new account record is added
 * Existing records will be updated in the run method of synchronize-accounts
 * @param current the current record in x_126749_aws_sc_account
 * @param previous the previous record in x_126749_aws_sc_account. This is null because this rule is running asynchronously
 */
(function executeRule(current, previous /*null when async*/ ) {
    var region;
    if (Util.isGovCloudAccount(current.sys_id.toString())) {
        region = "us-gov-west-1";
    } else if (Util.isBeijingRegionAccount(current.sys_id.toString())) {
        region = "cn-north-1";
    } else if (Util.isNingxiaRegionAccount(current.sys_id.toString())) {
        region = "cn-northwest-1";
    } else {
        region = "us-east-1";
    }
    var credential = AwsCredentials.from(current).as(AwsCredentials.User.Sync);
    var stsService = new AwsSecurityTokenService(region, credential);
    var account = stsService.getCallerIdentity().Account;
    var awsAccountGr = new GlideRecord('x_126749_aws_sc_account');
    awsAccountGr.addQuery('sys_id', current.sys_id);
    awsAccountGr.query();
    if (awsAccountGr.next()) {
        awsAccountGr.setValue('awsaccountnumber', Object(account));
        awsAccountGr.update();
    }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-04-06 06:44:11</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>6f569f301b40101039ed877ddc4bcb23</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Populate Account Number</sys_name>
        <sys_overrides/>
        <sys_package display_value="AWS Service Management Connector - 4.7.7" source="x_126749_aws_sc">f0b117a3db32320093a7d7a0cf961912</sys_package>
        <sys_policy/>
        <sys_scope display_value="AWS Service Management Connector - 4.7.7">f0b117a3db32320093a7d7a0cf961912</sys_scope>
        <sys_update_name>sys_script_6f569f301b40101039ed877ddc4bcb23</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-14 02:14:17</sys_updated_on>
        <template/>
        <when>async_always</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=6f569f301b40101039ed877ddc4bcb23"/>
</record_update>
