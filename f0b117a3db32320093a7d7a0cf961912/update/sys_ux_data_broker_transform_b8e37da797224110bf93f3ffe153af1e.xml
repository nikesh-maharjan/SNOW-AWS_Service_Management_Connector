<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_data_broker_transform">
    <sys_ux_data_broker_transform action="INSERT_OR_UPDATE">
        <acl_failure_result/>
        <api_name>x_126749_aws_sc.Get AWS accounts (Select, Dropdown, etc)</api_name>
        <description>Get AWS account records, formatted for Now Experience select, dropdowns, etc</description>
        <mutates_server_data>false</mutates_server_data>
        <name>Get AWS accounts (Select, Dropdown, etc)</name>
        <output_schema/>
        <private>false</private>
        <props>[
    {
        "name": "withHealthDashboardEnabled",
        "label": "With Health Dashboard integration enabled?",
        "description": "Filter AWS account that have Health Dashboard integration enabled",
        "readOnly": false,
        "fieldType": "boolean",
        "default": "false"
    }
]</props>
        <required_translations>[{"message":"With Health Dashboard integration enabled?","comment":""},{"message":"Filter AWS account that have Health Dashboard integration enabled","comment":""}]</required_translations>
        <schema_version>1.0.0</schema_version>
        <script><![CDATA[/** @Deployable({
    table: 'sys_ux_data_broker_transform',
    column: 'script',
    sysId: 'b8e37da797224110bf93f3ffe153af1e',
    metadata: {
        name: 'Get AWS accounts (Select, Dropdown, etc)',
        description: 'Get AWS account records, formatted for Now Experience select, dropdowns, etc',
        props: `[
    {
        "name": "withHealthDashboardEnabled",
        "label": "With Health Dashboard integration enabled?",
        "description": "Filter AWS account that have Health Dashboard integration enabled",
        "readOnly": false,
        "fieldType": "boolean",
        "default": "false"
    }
]`
    }
}) */
function transform(input) {
    var results = [];
    var grAccount = new GlideRecord('x_126749_aws_sc_account');
    // TODO: We should be able to get input.withHealthDashboardEnabled but this returns undefined. So for now, we are
    //       forcing the query to awsenablehealthdashboard === true
    grAccount.addQuery('awsenablehealthdashboard', 'true');
    grAccount.query();
    while (grAccount.next()) {
        results.push({
            'label': grAccount.awsname.toString(),
            'id': grAccount.sys_id.toString(),
            'sublabel': "Account number: " + (!grAccount.awsaccountnumber.nil() ? grAccount.awsaccountnumber.toString() : 'unknown')
        });
    }
    results.sort(function (a, b) {
        a = a.label.toUpperCase();
        b = b.label.toUpperCase();
        return (a < b) ? -1 : (a > b) ? 1 : 0;
    });
    return results;
}
]]></script>
        <sys_class_name>sys_ux_data_broker_transform</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-04-05 07:45:54</sys_created_on>
        <sys_id>b8e37da797224110bf93f3ffe153af1e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Get AWS accounts (Select, Dropdown, etc)</sys_name>
        <sys_package display_value="AWS Service Management Connector - 4.7.7" source="x_126749_aws_sc">f0b117a3db32320093a7d7a0cf961912</sys_package>
        <sys_policy/>
        <sys_scope display_value="AWS Service Management Connector - 4.7.7">f0b117a3db32320093a7d7a0cf961912</sys_scope>
        <sys_update_name>sys_ux_data_broker_transform_b8e37da797224110bf93f3ffe153af1e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-15 10:10:29</sys_updated_on>
    </sys_ux_data_broker_transform>
    <sys_translated_text action="delete_multiple" query="documentkey=b8e37da797224110bf93f3ffe153af1e"/>
</record_update>
