<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_126749_aws_sc.S3StorageResourceType</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>S3StorageResourceType</name>
        <script><![CDATA[var S3StorageResourceType = /** @class */ (function (_super) {
    Polyfill.__extends(S3StorageResourceType, _super);
    function S3StorageResourceType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    S3StorageResourceType.prototype.rules = function () {
        return [{
                order: 100,
                syncType: ConfigSyncProvider.SYNC_DIR.FROM_AWS_CONFIG,
                externalResourceType: 'AWS::S3::Bucket',
                externalResourceId: 'resourceId',
                searchKey: 'object_id',
                snTable: 'cmdb_ci_cloud_object_storage',
                syncFromAws: this.syncFromAws,
            }];
    };
    S3StorageResourceType.prototype.fields = function () {
        var _this = this;
        return [{
                mode: ConfigSyncProvider.FieldMode.FromAws,
                snField: 'name',
                transformFromAws: function (object, context) { return (context && context.resourceIdAsName) || !object.data.name
                    ? object.item.resourceId : object.data.name; }
            }, {
                mode: ConfigSyncProvider.FieldMode.FromAws,
                snField: 'terminated_on',
                awsField: 'item.resourceDeletionTime'
            }, {
                mode: ConfigSyncProvider.FieldMode.FromAws,
                snField: 'owner',
                transformFromAws: function (object) { return _this.getOwner(object); }
            }, {
                mode: ConfigSyncProvider.FieldMode.FromAws,
                snField: 'encryption_type',
                transformFromAws: function (object) { return _this.getEncryptionType(object); }
            }];
    };
    S3StorageResourceType.prototype.relationships = function () {
        return [
            {
                relationship: ConfigSyncProvider.RelationshipType.HostedOn,
                externalResourceType: 'AWS::Region',
                snTable: 'cmdb_ci_aws_datacenter',
                documentationOnly: true,
            }
        ];
    };
    S3StorageResourceType.prototype.syncFromAwsAddRelationships = function (context, config, resourceSysId) {
        // Process relationships to AWS regions
        this.addHostedOnRegionRelationship(context, config, resourceSysId);
    };
    S3StorageResourceType.prototype.getOwner = function (config) {
        var acl_list = {};
        if (!!config.item.supplementaryConfiguration.AccessControlList) {
            var maybeAccessList = Util.tryParseJson(config.item.supplementaryConfiguration.AccessControlList, 'S3 Access Control list');
            if (maybeAccessList.success === true) {
                acl_list = maybeAccessList.result;
            }
            return !!acl_list.owner.displayName ? acl_list.owner.displayName : acl_list.owner.id;
        }
        return;
    };
    S3StorageResourceType.prototype.getEncryptionType = function (config) {
        if (config.item.supplementaryConfiguration.hasOwnProperty('ServerSideEncryptionConfiguration')) {
            // ServerSideEncryptionConfiguration will always have rules https://docs.aws.amazon.com/AmazonS3/latest/API/API_ServerSideEncryptionConfiguration.html
            // applyServerSideEncryptionByDefault will always have sseAlgorithm https://docs.aws.amazon.com/AmazonS3/latest/API/API_ServerSideEncryptionConfiguration.html
            var encryptionRules = config.item.supplementaryConfiguration.ServerSideEncryptionConfiguration.rules;
            return encryptionRules.map(function (rule) { return rule.applyServerSideEncryptionByDefault; })
                .reduce(function (_, algorithm) { return algorithm ? algorithm.sseAlgorithm : ''; }, '');
        }
        return;
    };
    return S3StorageResourceType;
}(AbstractResourceType));
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-12 09:07:37</sys_created_on>
        <sys_id>d0e091642f341410143d857cf699b6e3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>S3StorageResourceType</sys_name>
        <sys_package display_value="AWS Service Management Connector - 4.7.7" source="x_126749_aws_sc">f0b117a3db32320093a7d7a0cf961912</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AWS Service Management Connector - 4.7.7">f0b117a3db32320093a7d7a0cf961912</sys_scope>
        <sys_update_name>sys_script_include_d0e091642f341410143d857cf699b6e3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-15 10:10:29</sys_updated_on>
    </sys_script_include>
</record_update>
