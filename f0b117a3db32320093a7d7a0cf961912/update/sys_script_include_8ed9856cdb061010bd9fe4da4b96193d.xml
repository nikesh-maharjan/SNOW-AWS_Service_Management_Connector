<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_126749_aws_sc.Ec2Ajax</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>Ec2Ajax</name>
        <script><![CDATA[var Ec2Ajax = /** @class */ (function (_super) {
    Polyfill.__extends(Ec2Ajax, _super);
    function Ec2Ajax() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.productParameter = AjaxParameterSupplier.required('sysparm_productSysId')
            .gr('x_126749_aws_sc_product')
            .notNil('name');
        _this.searchParameter = AjaxParameterSupplier.optional('sysparm_search');
        _this.searchByParameter = AjaxParameterSupplier.optional('sysparm_searchBy');
        _this.isAwsParameterLookupParameter = AjaxParameterSupplier.optional('sysparm_awsParameterLookup').fromBoolean();
        return _this;
    }
    Ec2Ajax.prototype.describeAvailabilityZones = function () {
        var _this = this;
        return this._applyWith([
            this.productParameter,
            this.searchParameter,
            this.isAwsParameterLookupParameter
        ], function (product, search, isAwsParameterLookup) {
            var credentials = AwsCredentials.from(product).as(AwsCredentials.User.End);
            var region = product.awsregion.toString();
            var ec2 = _this._getEc2(region, credentials);
            var filters = search && search.length > 0 ? [{ Name: 'zone-name', Values: ["*" + search + "*"] }] : undefined;
            var response = ec2.describeAvailabilityZones(filters, isAwsParameterLookup);
            if (response.haveError()) {
                return _this._errorResponse("Error describing Availability Zones: " + response.getBody());
            }
            var items = gs.xmlToJSON(response.getBody().trim()).DescribeAvailabilityZonesResponse.availabilityZoneInfo.item || [];
            if (!Array.isArray(items)) {
                items = [items];
            }
            return _this._response(items);
        });
    };
    Ec2Ajax.prototype.describeVpcs = function () {
        var _this = this;
        return this._applyWith([
            this.productParameter,
            this.searchParameter,
            this.isAwsParameterLookupParameter
        ], function (product, search, isAwsParameterLookup) {
            var credentials = AwsCredentials.from(product).as(AwsCredentials.User.End);
            var region = product.awsregion.toString();
            var ec2 = _this._getEc2(region, credentials);
            var filters = search && search.length > 0 ? [{ Name: 'vpc-id', Values: ["*" + search + "*"] }] : undefined;
            var response = ec2.describeVpcs(filters, isAwsParameterLookup);
            if (response.haveError()) {
                return _this._errorResponse("Error describing Vpcs: " + response.getBody());
            }
            var items = gs.xmlToJSON(response.getBody().trim()).DescribeVpcsResponse.vpcSet.item || [];
            if (!Array.isArray(items)) {
                items = [items];
            }
            return _this._response(items);
        });
    };
    Ec2Ajax.prototype.describeInstances = function () {
        var _this = this;
        return this._applyWith([
            this.productParameter,
            this.searchParameter,
            this.isAwsParameterLookupParameter
        ], function (product, search, isAwsParameterLookup) {
            var credentials = AwsCredentials.from(product).as(AwsCredentials.User.End);
            var region = product.awsregion.toString();
            var ec2 = _this._getEc2(region, credentials);
            var filters = search && search.length > 0 ? [{ Name: 'instance-id', Values: ["*" + search + "*"] }] : undefined;
            var response = ec2.describeInstances(filters, isAwsParameterLookup);
            if (response.haveError()) {
                return _this._errorResponse("Error describing Instances: " + response.getBody());
            }
            var items = gs.xmlToJSON(response.getBody().trim()).DescribeInstancesResponse.reservationSet.item || [];
            if (!Array.isArray(items)) {
                items = [items];
            }
            return _this._response(items);
        });
    };
    Ec2Ajax.prototype.describeKeyPairs = function () {
        var _this = this;
        return this._applyWith([
            this.productParameter,
            this.searchParameter,
            this.isAwsParameterLookupParameter
        ], function (product, search, isAwsParameterLookup) {
            var credentials = AwsCredentials.from(product).as(AwsCredentials.User.End);
            var region = product.awsregion.toString();
            var ec2 = _this._getEc2(region, credentials);
            var filters = search && search.length > 0
                ? [{ Name: 'key-name', Values: ["*" + search + "*"] }]
                : undefined;
            var response = ec2.describeKeyPairs(filters, isAwsParameterLookup);
            if (response.haveError()) {
                return _this._errorResponse("Error describing KeyPairs: " + response.getBody());
            }
            var items = gs.xmlToJSON(response.getBody().trim()).DescribeKeyPairsResponse.keySet.item || [];
            if (!Array.isArray(items)) {
                items = [items];
            }
            return _this._response(items);
        });
    };
    Ec2Ajax.prototype.describeSecurityGroups = function () {
        var _this = this;
        return this._applyWith([
            this.productParameter,
            this.searchParameter,
            this.searchByParameter,
            this.isAwsParameterLookupParameter
        ], function (product, search, searchBy, isAwsParameterLookup) {
            var credentials = AwsCredentials.from(product).as(AwsCredentials.User.End);
            var region = product.awsregion.toString();
            var ec2 = _this._getEc2(region, credentials);
            var filters = search && search.length > 0
                ? [{ Name: searchBy, Values: ["*" + search + "*"] }]
                : undefined;
            var response = ec2.describeSecurityGroups(filters, isAwsParameterLookup);
            if (response.haveError()) {
                return _this._errorResponse("Error describing SecurityGroups by " + searchBy + ": " + response.getBody());
            }
            var items = gs.xmlToJSON(response.getBody().trim())
                .DescribeSecurityGroupsResponse.securityGroupInfo.item || [];
            if (!Array.isArray(items)) {
                items = [items];
            }
            return _this._response(items);
        });
    };
    Ec2Ajax.prototype.describeSubnets = function () {
        var _this = this;
        return this._applyWith([
            this.productParameter,
            this.searchParameter,
            this.isAwsParameterLookupParameter
        ], function (product, search, isAwsParameterLookup) {
            var credentials = AwsCredentials.from(product).as(AwsCredentials.User.End);
            var region = product.awsregion.toString();
            var ec2 = _this._getEc2(region, credentials);
            var filters = search && search.length > 0
                ? [{ Name: 'subnet-id', Values: ["*" + search + "*"] }]
                : undefined;
            var response = ec2.describeSubnets(filters, isAwsParameterLookup);
            if (response.haveError()) {
                return _this._errorResponse("Error describing Subnets: " + response.getBody());
            }
            var items = gs.xmlToJSON(response.getBody().trim())
                .DescribeSubnetsResponse.subnetSet.item || [];
            if (!Array.isArray(items)) {
                items = [items];
            }
            return _this._response(items);
        });
    };
    Ec2Ajax.prototype.describeVolumes = function () {
        var _this = this;
        return this._applyWith([
            this.productParameter,
            this.searchParameter,
            this.isAwsParameterLookupParameter
        ], function (product, search, isAwsParameterLookup) {
            var credentials = AwsCredentials.from(product).as(AwsCredentials.User.End);
            var region = product.awsregion.toString();
            var ec2 = _this._getEc2(region, credentials);
            var filters = search && search.length > 0 ? [{ Name: 'volume-id', Values: ["*" + search + "*"] }] : undefined;
            var response = ec2.describeVolumes(filters, isAwsParameterLookup);
            if (response.haveError()) {
                return _this._errorResponse("Error describing Volumes: " + response.getBody());
            }
            var items = gs.xmlToJSON(response.getBody().trim()).DescribeVolumesResponse.volumeSet.item || [];
            if (!Array.isArray(items)) {
                items = [items];
            }
            return _this._response(items);
        });
    };
    return Ec2Ajax;
}(AbstractAwsAjaxProcessor));
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-07-13 11:55:03</sys_created_on>
        <sys_id>8ed9856cdb061010bd9fe4da4b96193d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Ec2Ajax</sys_name>
        <sys_package display_value="AWS Service Management Connector - 4.7.7" source="x_126749_aws_sc">f0b117a3db32320093a7d7a0cf961912</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AWS Service Management Connector - 4.7.7">f0b117a3db32320093a7d7a0cf961912</sys_scope>
        <sys_update_name>sys_script_include_8ed9856cdb061010bd9fe4da4b96193d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-15 10:10:29</sys_updated_on>
    </sys_script_include>
</record_update>
